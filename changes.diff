diff --git a/.gitignore b/.gitignore
index fc91367cf..9bd9f6832 100644
--- a/.gitignore
+++ b/.gitignore
@@ -13,6 +13,10 @@ out
 *.iml
 .idea
 
+# vscode
+.history
+.vscode
+
 # gradle
 build/
 build_*/
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/abilities/ExplosionAbility.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/abilities/ExplosionAbility.java
index abddfa633..a5c1fe1d3 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/abilities/ExplosionAbility.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/abilities/ExplosionAbility.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
+import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
 import com.google.common.collect.Lists;
@@ -52,8 +53,7 @@ import xyz.pixelatedw.mineminenomi.init.ModTags;
 import xyz.pixelatedw.mineminenomi.particles.effects.ParticleEffect;
 import xyz.pixelatedw.mineminenomi.wypi.WyHelper;
 
-public class ExplosionAbility extends Explosion
-{
+public class ExplosionAbility extends Explosion {
 	private World world;
 	private Entity exploder;
 	private double explosionX;
@@ -72,8 +72,10 @@ public class ExplosionAbility extends Explosion
 	private boolean canDestroyBlocks = true;
 	private boolean canDropBlocksAfterExplosion = false;
 	private boolean canDamageEntities = true;
+	private boolean checkForFaction = true;
 	private boolean canDamageOwner = false;
-	private boolean canAlwaysDamage = true;
+	private boolean canAlwaysDamage = false;
+	private boolean canDamageOnce = true;
 	private boolean canProduceExplosionSound = true;
 	private boolean protectOwnerFromFalling = false;
 	private boolean canCauseKnockback = true;
@@ -84,12 +86,15 @@ public class ExplosionAbility extends Explosion
 	private int explodedBlocksLimit;
 	private int size = 52;
 	private int explodedBlocks;
-	public ArrayList<Entity> immuneEntities = new ArrayList();
-	public ArrayList<Entity> damagedEntities = new ArrayList();
+	
+	public ArrayList<Entity> immuneEntities = new ArrayList<>();
+	public ArrayList<Entity> damagedEntities = new ArrayList<>();
+	
+	private static final ArrayList<Entity> DAMAGED_ENTITIES = new ArrayList<>();
 
-	public ExplosionAbility(Entity entity, World world, double posX, double posY, double posZ, float power)
-	{
-		super(world, entity, (DamageSource)null, (ExplosionContext)null, posX, posY, posZ, power, false, Mode.DESTROY);
+	public ExplosionAbility(Entity entity, World world, double posX, double posY, double posZ, float power) {
+		super(world, entity, (DamageSource) null, (ExplosionContext) null, posX, posY, posZ, power, false, Mode.DESTROY);
+		
 		this.world = world;
 		this.exploder = entity;
 		this.explosionSize = power;
@@ -100,179 +105,170 @@ public class ExplosionAbility extends Explosion
 		this.damageSource = DamageSource.explosion(this);
 	}
 
-	public void setExplosionPos(double posX, double posY, double posZ)
-	{
+	public void setExplosionPos(double posX, double posY, double posZ) {
 		this.explosionX = posX;
 		this.explosionY = posY;
 		this.explosionZ = posZ;
 	}
 	
-	public void setExplosionSize(float explosionSize)
-	{
+	public void setExplosionSize(float explosionSize) {
 		this.explosionSize = explosionSize;
 	}
 	
-	public void setExplodedBlocksLimit(int limit)
-	{
+	public void setExplodedBlocksLimit(int limit) {
 		this.explodedBlocksLimit = limit;
 	}
 	
-	public double getStaticDamage()
-	{
+	public double getStaticDamage() {
 		return this.staticDamage;
 	}
 
-	public void setStaticDamage(float damage)
-	{
+	public void setStaticDamage(float damage) {
 		this.staticDamage = damage;
 	}
 
-	public double getStaticBlockResistance()
-	{
+	public double getStaticBlockResistance() {
 		return this.staticBlockResistance;
 	}
 
-	public void setStaticBlockResistance(float damage)
-	{
+	public void setStaticBlockResistance(float damage) {
 		this.staticBlockResistance = damage;
 	}
 
-	public void setHeightDifference(int heightDifference)
-	{
+	public void setHeightDifference(int heightDifference) {
 		this.heightDifference = heightDifference;
 	}
 
-	public void setDamageOwner(boolean damageOwner)
-	{
+	public void setDamageOwner(boolean damageOwner) {
 		this.canDamageOwner = damageOwner;
 	}
 
-	public void setDamageEntities(boolean damageEntities)
-	{
+	public void setDamageEntities(boolean damageEntities) {
 		this.canDamageEntities = damageEntities;
 	}
+	
+	public void ignoreFactionChecks() {
+		this.checkForFaction = false;
+	}
 
-	public void setDropBlocksAfterExplosion(boolean canDrop)
-	{
+	public void setDropBlocksAfterExplosion(boolean canDrop) {
 		this.canDropBlocksAfterExplosion = canDrop;
 	}
 
-	public void setFireAfterExplosion(boolean hasFire)
-	{
+	public void setFireAfterExplosion(boolean hasFire) {
 		this.canStartFireAfterExplosion = hasFire;
 	}
 
-	public void setDestroyBlocks(boolean canDestroyBlocks)
-	{
+	public void setDestroyBlocks(boolean canDestroyBlocks) {
 		this.canDestroyBlocks = canDestroyBlocks;
 	}
 
-	public void setSmokeParticles(ParticleEffect particle)
-	{
+	public void setSmokeParticles(ParticleEffect particle) {
 		this.particles = particle;
 	}
 
-	public boolean getAlwaysDamage()
-	{
+	public boolean getAlwaysDamage() {
 		return this.canAlwaysDamage;
 	}
 
-	public void setAlwaysDamage(boolean flag)
-	{
+	public void setAlwaysDamage(boolean flag) {
 		this.canAlwaysDamage = flag;
 	}
+	
+	public boolean getDamageOnce() {
+		return this.canDamageOnce;
+	}
 
-	public void addRemovedBlocksToList()
-	{
+	public void setDamageOnce(boolean flag) {
+		this.canDamageOnce = flag;
+	}
+
+	public void addRemovedBlocksToList() {
 		this.addRemovedBlocksToList = true;
 	}
 	
-	public void setProtectOwnerFromFalling(boolean flag)
-	{
+	public void setProtectOwnerFromFalling(boolean flag) {
 		this.protectOwnerFromFalling = flag;
 	}
 
-	public boolean hasSmokeParticles()
-	{
+	public boolean hasSmokeParticles() {
 		return this.particles != null;
 	}
 
-	public void setExplosionSound(boolean hasSound)
-	{
+	public void setExplosionSound(boolean hasSound) {
 		this.canProduceExplosionSound = hasSound;
 	}
 
-	private void resetDamage(LivingEntity entity)
-	{
+	private void resetDamage(LivingEntity entity) {
 		entity.hurtTime = entity.invulnerableTime = 0;
 	}
 
-	public void disableExplosionKnockback()
-	{
+	public void disableExplosionKnockback() {
 		this.canCauseKnockback = false;
 	}
 
 	@Override
-	public DamageSource getDamageSource()
-	{
+	public DamageSource getDamageSource() {
 		return this.damageSource;
 	}
 
-	public void setDamageSource(DamageSource damageSourceIn)
-	{
+	public void setDamageSource(DamageSource damageSourceIn) {
 		this.damageSource = damageSourceIn;
 	}
 	
-	public void doExplosion()
-	{
+	public void doExplosion() {
 //		boolean flag = this.exploder != null && this.exploder instanceof PlayerEntity;
-		if ((this.heightDifference > 0 && this.exploder != null && this.exploder.getY() - this.heightDifference > this.explosionY))
+		
+		if ((this.heightDifference > 0 && this.exploder != null && this.exploder.getY() - this.heightDifference > this.explosionY)) {
 			return;
-				
+		}
+
 		Set<BlockPos> set = Sets.newHashSet();
 
 		// this code should make the loop smaller for, well smaller explosions.
-		if(this.size + 4 > this.explosionSize)
+		if (this.size + 4 > this.explosionSize) {
 			this.size = Math.max((int) (this.explosionSize + 4), 16);
+		}
 
-		for (int j = 0; j < this.size; ++j)
-		{
-			for (int k = 0; k < this.size; ++k)
-			{
-				for (int l = 0; l < this.size; ++l)
-				{
-					if (j == 0 || j == (this.size - 1) || k == 0 || k == (this.size - 1) || l == 0 || l == (this.size - 1))
-					{
+		for (int j = 0; j < this.size; ++j) {
+			for (int k = 0; k < this.size; ++k) {
+				for (int l = 0; l < this.size; ++l) {
+					if (j == 0 || j == (this.size - 1) || k == 0 || k == (this.size - 1) || l == 0 || l == (this.size - 1)) {
 						double d0 = j / (float)(this.size - 1) * 2.0F - 1.0F;
 						double d1 = k / (float)(this.size - 1) * 2.0F - 1.0F;
 						double d2 = l / (float)(this.size - 1) * 2.0F - 1.0F;
 						double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+						
 						d0 = d0 / d3;
 						d1 = d1 / d3;
 						d2 = d2 / d3;
+						
 						float f = this.explosionSize * (0.7F + this.world.random.nextFloat() * 0.6F);
+						
 						double eX = this.explosionX;
 						double eY = this.explosionY;
 						double eZ = this.explosionZ;
 						
-						for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F)
-						{
+						for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
 							BlockPos blockpos = new BlockPos(eX, eY, eZ);
+							
 							BlockState blockState = this.world.getBlockState(blockpos);
 							FluidState ifluidstate = this.world.getFluidState(blockpos);
-							if (!blockState.isAir() || !ifluidstate.isEmpty())
-							{
+							
+							if (!blockState.isAir() || !ifluidstate.isEmpty()) {
 								float f2 = Math.max(blockState.getExplosionResistance(this.world, blockpos, this), ifluidstate.getExplosionResistance(this.world, blockpos, this));
-								if (this.exploder != null)
+								
+								if (this.exploder != null) {
 									f2 = this.exploder.getBlockExplosionResistance(this, this.world, blockpos, blockState, ifluidstate, f2);
+								}
 								
 								f -= this.getStaticBlockResistance() > 0 ? this.getStaticBlockResistance() : (f2 + 0.3F) * 0.3F;
 							}
 							
-							if (f > 0.0F && (this.exploder == null || this.exploder.shouldBlockExplode(this, this.world, blockpos, blockState, f)))
-							{
-								if(!blockState.is(ModTags.Blocks.KAIROSEKI))
+							if (f > 0.0F && (this.exploder == null || this.exploder.shouldBlockExplode(this, this.world, blockpos, blockState, f))) {
+								if (!blockState.is(ModTags.Blocks.KAIROSEKI)) {
 									set.add(blockpos);
+								}
 							}
 
 							eX += d0 * 0.3F;
@@ -285,95 +281,115 @@ public class ExplosionAbility extends Explosion
 		}
 
 		this.affectedBlockPositions.addAll(set);
+		
 		float size = this.explosionSize * 2.0F;
+		
 		List<Entity> list;
+
 		BlockPos explosionPos = new BlockPos(this.explosionX, this.explosionY, this.explosionZ);
-		if(this.getExploder() instanceof LivingEntity)
-		{
-			list = WyHelper.getNearbyEntities(explosionPos, this.world, size, size, size, ModEntityPredicates.getEnemyFactions((LivingEntity) this.getExploder()), Entity.class);
-		}
-		else
-		{
+		
+		if (this.getExploder() instanceof LivingEntity) {
+			Predicate<Entity> factionCheck = null;
+			
+			if (this.checkForFaction) {
+				factionCheck = ModEntityPredicates.getEnemyFactions((LivingEntity) this.getExploder());
+			}
+			
+			list = WyHelper.getNearbyEntities(explosionPos, this.world, size, size, size, factionCheck, Entity.class);
+		} else {
 			list = WyHelper.getNearbyEntities(explosionPos, this.world, size, size, size, null, Entity.class);
 		}
 		
-		if(this.canDamageOwner)
-		{
+		if (this.canDamageOwner) {
 			list.add(this.getExploder());
 		}
-
+		
 		list = list.stream().filter((e) -> {
-			if(e instanceof LivingEntity)
-			{
+			if (e instanceof LivingEntity) {
 				DamageSource source = this.getDamageSource();
-				if(source.getDirectEntity() != null)
-				{
-					return ((LivingEntity)e).canSee(source.getDirectEntity());
+				
+				if (source.getDirectEntity() != null) {
+					return ((LivingEntity) e).canSee(source.getDirectEntity());
 				}
 			}
+			
 			return true;
 		}).collect(Collectors.toList());
-
-		if(this.immuneEntities.size() > 0)
+		
+		if (this.immuneEntities.size() > 0) {
 			list.removeAll(this.immuneEntities);
-
+		}
+		
 		ForgeEventFactory.onExplosionDetonate(this.world, this, list, size);
+		
 		Vector3d v3d = new Vector3d(this.explosionX, this.explosionY, this.explosionZ);
-
-		if(this.canDamageEntities)
-		{
-			for (int k2 = 0; k2 < list.size(); ++k2)
-			{
+		
+		if (this.canDamageEntities) {
+			for (int k2 = 0; k2 < list.size(); ++k2) {
 				Entity entity = list.get(k2);
-				if(entity == null || !entity.isAlive()) {
+				
+				if (entity == null || !entity.isAlive()) {
+					if (ExplosionAbility.DAMAGED_ENTITIES.contains(entity)) {
+						ExplosionAbility.DAMAGED_ENTITIES.remove(entity);
+					}
+					
 					continue;
 				}
-				if (!entity.ignoreExplosion())
-				{
+				
+				if (ExplosionAbility.DAMAGED_ENTITIES.contains(entity) && entity instanceof LivingEntity && ((LivingEntity) entity).hurtTime == 0 && entity.invulnerableTime == 0) {
+					ExplosionAbility.DAMAGED_ENTITIES.remove(entity);
+				}
+				
+				if (!entity.ignoreExplosion()) {
 					double distance = entity.distanceToSqr(this.explosionX, this.explosionY, this.explosionZ) / size;
-					if (distance <= 1.0D)
-					{
+					
+					if (distance <= 1.0D) {
 						double xDistance = entity.getX() - this.explosionX;
 						double yDistance = entity.getY() + entity.getEyeHeight() - this.explosionY;
 						double zDistance = entity.getZ() - this.explosionZ;
 						double squareDistance = MathHelper.sqrt(xDistance * xDistance + yDistance * yDistance + zDistance * zDistance);
-						if (squareDistance != 0.0D)
-						{
+						
+						if (squareDistance != 0.0D) {
 							xDistance = xDistance / squareDistance;
 							yDistance = yDistance / squareDistance;
 							zDistance = zDistance / squareDistance;
 
 							double blockDensity = this.getStaticBlockResistance() > 0 ? 0 : Explosion.getSeenPercent(v3d, entity);
-							double power = (1.0D - distance) * blockDensity;			
+							double power = (1.0D - distance) * blockDensity;
 							
-							if (entity instanceof LivingEntity && this.getAlwaysDamage())
+							if (entity instanceof LivingEntity && (this.getAlwaysDamage() || !ExplosionAbility.DAMAGED_ENTITIES.contains(entity) && this.getDamageOnce())) {
 								this.resetDamage((LivingEntity) entity);
+							}
 
-							if (this.staticDamage > 0)
-							{
-								if(entity.hurt(this.getDamageSource(), this.staticDamage))
+							if (this.staticDamage > 0.0F) {
+								if (entity.hurt(this.getDamageSource(), this.staticDamage)) {
 									this.damagedEntities.add(entity);
-							}
-							else
-							{
+									
+									ExplosionAbility.DAMAGED_ENTITIES.add(entity);
+								}
+							} else {
 								float damage = ((float) ((power * power + power) / 2.0D * 7.0D * size + 1.0D));
-								if(entity.hurt(this.getDamageSource(), damage))
+								
+								if (entity.hurt(this.getDamageSource(), damage)) {
 									this.damagedEntities.add(entity);
+									
+									ExplosionAbility.DAMAGED_ENTITIES.add(entity);
+								}
 							}
 							
 							double blastDamageReduction = power;
 
-							if (entity instanceof LivingEntity)
+							if (entity instanceof LivingEntity) {
 								blastDamageReduction = ProtectionEnchantment.getExplosionKnockbackAfterDampener((LivingEntity) entity, power);
+							}
 							
-							if(this.canCauseKnockback)
-							{
+							if (this.canCauseKnockback) 	{
 								entity.setDeltaMovement(entity.getDeltaMovement().add(xDistance * blastDamageReduction, yDistance * blastDamageReduction, zDistance * blastDamageReduction));
-								if (entity instanceof PlayerEntity)
-								{
+								
+								if (entity instanceof PlayerEntity) {
 									PlayerEntity playerEntity = (PlayerEntity) entity;
-									if (!playerEntity.isSpectator() && (!playerEntity.isCreative() || !playerEntity.abilities.flying))
-									{
+									
+									if (!playerEntity.isSpectator() && (!playerEntity.isCreative() || !playerEntity.abilities.flying)) {
 										this.playerKnockbackMap.put(playerEntity, new Vector3d(xDistance * power, yDistance * power, zDistance * power));
 									}
 								}
@@ -384,24 +400,27 @@ public class ExplosionAbility extends Explosion
 			}
 		}
 
-		if (this.canProduceExplosionSound)
+		if (this.canProduceExplosionSound) {
 			this.world.playSound((PlayerEntity) null, this.explosionX, this.explosionY, this.explosionZ, SoundEvents.GENERIC_EXPLODE, SoundCategory.BLOCKS, 4.0F, (1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
+		}
 
-		if (this.hasSmokeParticles())
-			this.particles.spawn(this.world, this.explosionX, this.explosionY, this.explosionZ, 0, 0, 0);
-		//	ModNetwork.sendToAllAround(new SParticlesPacket(this.smokeParticles, this.explosionX, this.explosionY, this.explosionZ), (LivingEntity) this.exploder);
-
-		if (this.canDestroyBlocks && CommonConfig.INSTANCE.isAbilityGriefingEnabled() && (this.explodedBlocksLimit <= 0 || this.explodedBlocks < this.explodedBlocksLimit))
-		{
+		if (this.hasSmokeParticles()) {
+			this.particles.spawn(this.world, this.explosionX, this.explosionY, this.explosionZ, 0.0D, 0.0D, 0.0D);
+			
+//			ModNetwork.sendToAllAround(new SParticlesPacket(this.smokeParticles, this.explosionX, this.explosionY, this.explosionZ), (LivingEntity) this.exploder);
+		}
+		
+		if (this.canDestroyBlocks && CommonConfig.INSTANCE.isAbilityGriefingEnabled() && (this.explodedBlocksLimit <= 0 || this.explodedBlocks < this.explodedBlocksLimit)) {
 			ObjectArrayList<Pair<ItemStack, BlockPos>> objectarraylist = new ObjectArrayList<>();
+			
 			Collections.shuffle(this.affectedBlockPositions, this.world.random);
 
-			for (BlockPos blockpos : this.affectedBlockPositions)
-			{
+			for (BlockPos blockpos : this.affectedBlockPositions) {
 				BlockState blockstate = this.world.getBlockState(blockpos);
 
-				if(blockstate.getMaterial() == Material.WATER && !CommonConfig.INSTANCE.getDestroyWater())
+				if (blockstate.getMaterial() == Material.WATER && !CommonConfig.INSTANCE.getDestroyWater()) {
 					continue;
+				}
 
 				boolean blockIsKairoseki = KairosekiBlockProtectionRule.INSTANCE.isBanned(blockstate);
 				boolean blockIsRestricted = RestrictedBlockProtectionRule.INSTANCE.isBanned(blockstate);
@@ -409,76 +428,80 @@ public class ExplosionAbility extends Explosion
 //				boolean inProtectedAreaFlag = ProtectedAreasData.get(this.world).isInsideRestrictedArea(blockpos.getX(), blockpos.getY(), blockpos.getZ());
 
 				boolean fallingProtection = true;
-				if(this.protectOwnerFromFalling && this.exploder != null)
+				
+				if (this.protectOwnerFromFalling && this.exploder != null) {
 					fallingProtection = Math.sqrt(this.exploder.distanceToSqr(blockpos.getX(), this.exploder.getY(), blockpos.getZ())) > 1.5F;
-
-				if (!blockstate.isAir() && !blockIsKairoseki && !blockIsRestricted && !hardBlockRestriction && fallingProtection)
-				{
-					if (this.world instanceof ServerWorld && blockstate.canDropFromExplosion(this.world, blockpos, this))
-					{
+				}
+				
+				if (!blockstate.isAir() && !blockIsKairoseki && !blockIsRestricted && !hardBlockRestriction && fallingProtection) {
+					if (this.world instanceof ServerWorld && blockstate.canDropFromExplosion(this.world, blockpos, this)) {
 						TileEntity tileentity = blockstate.hasTileEntity() ? this.world.getBlockEntity(blockpos) : null;
+						
 						LootContext.Builder lootcontext$builder = (new LootContext.Builder((ServerWorld) this.world)).withRandom(this.world.random).withParameter(LootParameters.ORIGIN, Vector3d.atCenterOf(blockpos)).withParameter(LootParameters.TOOL, ItemStack.EMPTY).withOptionalParameter(LootParameters.BLOCK_ENTITY, tileentity).withOptionalParameter(LootParameters.THIS_ENTITY, this.exploder);
+						
 						lootcontext$builder.withParameter(LootParameters.EXPLOSION_RADIUS, this.explosionSize);
 
-						if(this.canDropBlocksAfterExplosion)
-							blockstate.getDrops(lootcontext$builder).forEach((p_229977_2_) ->
-									func_229976_a_(objectarraylist, p_229977_2_, blockpos));
+						if (this.canDropBlocksAfterExplosion) {
+							blockstate.getDrops(lootcontext$builder).forEach((p_229977_2_) -> func_229976_a_(objectarraylist, p_229977_2_, blockpos));
+						}
 
-						if (this.addRemovedBlocksToList)
+						if (this.addRemovedBlocksToList) {
 							this.removedBlocks.add(new FallingBlockEntity(this.world, blockpos.getX(), blockpos.getY(), blockpos.getZ(), blockstate));
+						}
 					}
 
 					blockstate.onBlockExploded(this.world, blockpos, this);
-					this.explodedBlocks++;
+					
+					++this.explodedBlocks;
 				}
 			}
 		}
 
-		if (this.canStartFireAfterExplosion && CommonConfig.INSTANCE.isAbilityGriefingEnabled())
-		{
+		if (this.canStartFireAfterExplosion && CommonConfig.INSTANCE.isAbilityGriefingEnabled()) {
 			Iterator<BlockPos> positions = this.affectedBlockPositions.iterator();
-			while(positions.hasNext())
-			{
+			
+			while (positions.hasNext()) {
 				BlockPos blockpos1 = positions.next();
+				
 				boolean inProtectedAreaFlag = ProtectedAreasData.get(this.world).isInsideRestrictedArea(blockpos1.getX(), blockpos1.getY(), blockpos1.getZ());
 
-				if (this.world.getBlockState(blockpos1).isAir() && this.world.getBlockState(blockpos1.below()).isSolidRender(this.world, blockpos1.below()) && this.random.nextInt(5) == 0 && !inProtectedAreaFlag)
-				{
+				if (this.world.getBlockState(blockpos1).isAir() && this.world.getBlockState(blockpos1.below()).isSolidRender(this.world, blockpos1.below()) && this.random.nextInt(5) == 0 && !inProtectedAreaFlag) {
 					this.world.setBlockAndUpdate(blockpos1, AbstractFireBlock.getState(this.world, blockpos1));
+					
 					positions.remove();
 				}
 			}
 		}
 		
-		if(this.exploder instanceof ServerPlayerEntity && StructuresHelper.isInsideShip((ServerWorld) this.world, new BlockPos(v3d)))
+		if (this.exploder instanceof ServerPlayerEntity && StructuresHelper.isInsideShip((ServerWorld) this.world, new BlockPos(v3d))) {
 			ModAdvancements.SUBTLE_TWEAKS.trigger((ServerPlayerEntity) this.exploder);
+		}
 	}
 
-	private static void func_229976_a_(ObjectArrayList<Pair<ItemStack, BlockPos>> drops, ItemStack itemStack, BlockPos pos)
-	{
+	private static void func_229976_a_(ObjectArrayList<Pair<ItemStack, BlockPos>> drops, ItemStack itemStack, BlockPos pos) {
 		int i = drops.size();
-
-		for (int j = 0; j < i; ++j)
-		{
+		
+		for (int j = 0; j < i; ++j) {
 			Pair<ItemStack, BlockPos> pair = drops.get(j);
+			
 			ItemStack itemstack = pair.getFirst();
-			if (ItemEntity.areMergable(itemstack, itemStack))
-			{
+			
+			if (ItemEntity.areMergable(itemstack, itemStack)) {
 				ItemStack itemstack1 = ItemEntity.merge(itemstack, itemStack, 16);
+				
 				drops.set(j, Pair.of(itemstack1, pair.getSecond()));
-				if (itemStack.isEmpty())
-				{
+				
+				if (itemStack.isEmpty()) {
 					return;
 				}
 			}
 		}
-
+		
 		drops.add(Pair.of(itemStack, pos));
 	}
 
 	@Override
-	public Map<PlayerEntity, Vector3d> getHitPlayers()
-	{
+	public Map<PlayerEntity, Vector3d> getHitPlayers() {
 		return this.playerKnockbackMap;
 	}
 	
@@ -486,5 +509,4 @@ public class ExplosionAbility extends Explosion
 	public List<BlockPos> getToBlow() {
 		return this.affectedBlockPositions;
 	}
-
-}
\ No newline at end of file
+}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/Crew.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/Crew.java
index 00fb03171..4df27c887 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/Crew.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/Crew.java
@@ -1,5 +1,6 @@
 package xyz.pixelatedw.mineminenomi.api.crew;
 
+import java.time.Instant;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
@@ -17,6 +18,7 @@ public class Crew
 {
 	private String name;
 	private boolean isTemporary;
+	private long creationDate;
 	private List<Member> members = new ArrayList<Member>();
 	private JollyRoger jollyRoger = new JollyRoger();
 	
@@ -24,7 +26,7 @@ public class Crew
 
 	public Crew(String name, LivingEntity entity)
 	{
-		this(name, entity.getUUID(), entity.getDisplayName().getString());
+		this(name, entity.getUUID(), entity.getDisplayName().getString(), Instant.now().getEpochSecond());
 	}
 	
 	public static Crew from(CompoundNBT nbt)
@@ -34,11 +36,12 @@ public class Crew
 		return crew;
 	}
 	
-	public Crew(String name, UUID capId, String username)
+	public Crew(String name, UUID capId, String username, long creationDate)
 	{
 		this.name = name;
 		this.isTemporary = true;
 		this.addMember(capId, username).setIsCaptain(true);
+		this.creationDate = creationDate;
 	}
 
 	public void setName(String name)
@@ -126,6 +129,14 @@ public class Crew
 	{
 		this.jollyRoger = jr;
 	}
+
+	public long getCreationDate() {
+		return this.creationDate;
+	}
+	
+	public void setCreationDate(long creationDate) {
+		this.creationDate = creationDate;
+	}
 	
 	public CompoundNBT write()
 	{
@@ -145,6 +156,8 @@ public class Crew
 
 		CompoundNBT jollyRogerData = this.jollyRoger.write();
 		crewNBT.put("jollyRoger", jollyRogerData);
+
+		crewNBT.putLong("creationDate", this.creationDate);
 		
 		return crewNBT;
 	}
@@ -164,6 +177,13 @@ public class Crew
 		
 		CompoundNBT jollyRogerData = nbt.getCompound("jollyRoger");
 		this.jollyRoger.read(jollyRogerData);
+
+		Long creationDate = nbt.getLong("creationDate");
+		if(creationDate == 0L) {
+			this.creationDate = Instant.now().getEpochSecond();
+			return;
+		}
+		this.creationDate = creationDate;
 	}
 
 	public static class Member
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/JollyRoger.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/JollyRoger.java
index a5f2e0297..43cc29905 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/JollyRoger.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/crew/JollyRoger.java
@@ -1,6 +1,12 @@
 package xyz.pixelatedw.mineminenomi.api.crew;
 
+import java.awt.Color;
+import java.awt.image.BufferedImage;
+import java.io.IOException;
 import java.util.Arrays;
+import java.util.Optional;
+
+import javax.imageio.ImageIO;
 
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.nbt.ListNBT;
@@ -9,6 +15,7 @@ import net.minecraftforge.common.util.Constants;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import xyz.pixelatedw.mineminenomi.ModMain;
 import xyz.pixelatedw.mineminenomi.init.ModJollyRogers;
+import xyz.pixelatedw.mineminenomi.wypi.WyHelper;
 
 public class JollyRoger
 {
@@ -254,4 +261,117 @@ public class JollyRoger
 	{
 		return Arrays.stream(this.details).parallel().anyMatch(detail -> detail != null && detail.equals(det));
 	}
+
+	/**
+	 * Returns the JollyRoger as a BufferedImage.
+	 *
+	 * Returns Optional.empty() if there have been an IOError.
+	 *
+	 * @return Optional<BufferedImage>
+	 */
+	public Optional<BufferedImage> getAsBufferedImage()
+	{
+		try {
+			BufferedImage jollyRogerImage = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);
+
+			for (JollyRogerElement backgroundElement : this.backgrounds)
+			{
+				if (backgroundElement == null)
+				{
+					continue;
+				}
+
+				BufferedImage backgroundElementImage = this.elementToImage(backgroundElement);
+
+				jollyRogerImage.getGraphics().drawImage(backgroundElementImage, 0, 0, null);
+			}
+
+			BufferedImage jollyRogerBase = this.elementToImage(this.base);
+			jollyRogerImage.getGraphics().drawImage(jollyRogerBase, 0, 0, null);
+
+			for (JollyRogerElement detailElement : this.details)
+			{
+				if (detailElement == null)
+				{
+					continue;
+				}
+
+				BufferedImage detailElementImage = this.elementToImage(detailElement);
+
+				jollyRogerImage.getGraphics().drawImage(detailElementImage, 0, 0, null);
+			}
+
+			return Optional
+					.of(jollyRogerImage);
+		} catch (IOException e)
+		{
+			ModMain.LOGGER.error(e.getMessage());
+		}
+
+		return Optional.empty();
+	}
+
+	/**
+	 * Generates a BufferedImage with coloring if necessary out of a
+	 * JollyRogerElement
+	 *
+	 * @param element
+	 * @return BufferedImage
+	 * @throws IOException
+	 */
+	private BufferedImage elementToImage(JollyRogerElement element) throws IOException
+	{
+		String assetPath = "assets/mineminenomi/";
+
+		BufferedImage elementImage = ImageIO.read(getClass().getClassLoader()
+				.getResourceAsStream(assetPath + element.getTexture().getPath()));
+
+		if (element.canBeColored())
+		{
+			elementImage = this.applyColorToImage(element.getColor(),
+					elementImage);
+		}
+
+		return elementImage;
+	}
+
+	/**
+	 * Applies a color to a given image with the given hex value.
+	 * Skips pixels with no Alpha value or full black pixel.
+	 *
+	 * @param hex
+	 * @param element
+	 * @return BufferedImage
+	 */
+	private BufferedImage applyColorToImage(String hex, BufferedImage image)
+	{
+		Color color = WyHelper.hexToRGB(hex);
+
+		for (int x = 0; x < image.getWidth(); x++)
+		{
+			for (int y = 0; y < image.getHeight(); y++)
+			{
+				int rgba = image.getRGB(x, y);
+				Color pixelColor = new Color(rgba, true);
+
+				if (pixelColor.getAlpha() != 0 && (rgba & 0x00FFFFFF) != 0)
+				{
+					Integer tintedPixel = tintABGRPixel(pixelColor.getRGB(), color);
+					image.setRGB(x, y, tintedPixel);
+				}
+			}
+		}
+
+		return image;
+	}
+
+	public static Integer tintABGRPixel(int pixelColor, Color tintColor) {
+		int x = pixelColor>>16 & 0xff, y = pixelColor>>8 & 0xff, z = pixelColor & 0xff;
+		int top = 2126*x + 7252*y + 722*z;
+		int Btemp = (int)((tintColor.getBlue() * top * 1766117501L) >> 52);
+		int Gtemp = (int)((tintColor.getGreen() * top * 1766117501L) >> 52);
+		int Rtemp = (int)((tintColor.getRed() * top * 1766117501L) >> 52);
+	
+		return ((pixelColor>>24 & 0xff) << 24) | Btemp & 0xff | (Gtemp & 0xff) << 8 | (Rtemp & 0xff) << 16;
+	}
 }
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/CrewEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/CrewEvent.java
index c871e5847..04ff8748c 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/CrewEvent.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/CrewEvent.java
@@ -46,4 +46,13 @@ public class CrewEvent extends PlayerEvent
 			super(player, crew);
 		}
 	}
+
+	@Cancelable 
+	public static class Kick extends CrewEvent
+	{
+		public Kick(PlayerEntity player, Crew crew)
+		{
+			super(player, crew);
+		}
+	}
 }
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/JollyRogerEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/JollyRogerEvent.java
new file mode 100644
index 000000000..5e92b35e2
--- /dev/null
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/JollyRogerEvent.java
@@ -0,0 +1,34 @@
+package xyz.pixelatedw.mineminenomi.api.events;
+
+import net.minecraftforge.eventbus.api.Event;
+import xyz.pixelatedw.mineminenomi.api.crew.Crew;
+import xyz.pixelatedw.mineminenomi.api.crew.JollyRoger;
+
+public class JollyRogerEvent extends Event
+{
+	private JollyRoger jollyRoger;
+	private Crew crew;
+
+	public JollyRogerEvent(JollyRoger jollyRoger, Crew crew)
+	{
+		this.jollyRoger = jollyRoger;
+		this.crew = crew;
+	}
+
+	public Crew getCrew()
+	{
+		return this.crew;
+	}
+
+	public JollyRoger getJollyRoger()
+	{
+		return this.jollyRoger;
+	}
+	public static class Update extends JollyRogerEvent
+	{
+		public Update(JollyRoger jollyRoger, Crew crew)
+		{
+			super(jollyRoger, crew);
+		}
+	}
+}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/DroppedDevilFruitEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/DroppedDevilFruitEvent.java
new file mode 100644
index 000000000..cf0f816c8
--- /dev/null
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/DroppedDevilFruitEvent.java
@@ -0,0 +1,27 @@
+package xyz.pixelatedw.mineminenomi.api.events.onefruit;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import net.minecraft.entity.LivingEntity;
+import net.minecraft.item.Item;
+import net.minecraftforge.event.entity.EntityEvent;
+
+public class DroppedDevilFruitEvent extends EntityEvent {
+	private final Item devilFruit;
+	private final String reason;
+
+	public DroppedDevilFruitEvent(@Nullable LivingEntity entity, @Nonnull Item devilFruit,
+			String reason) {
+		super(entity);
+		this.devilFruit = devilFruit;
+		this.reason = reason;
+	}
+
+	public Item getItem() {
+		return this.devilFruit;
+	}
+
+	public String getReason() {
+		return this.reason;
+	}
+}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/EatDevilFruitEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/EatDevilFruitEvent.java
similarity index 94%
rename from src/main/java/xyz/pixelatedw/mineminenomi/api/events/EatDevilFruitEvent.java
rename to src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/EatDevilFruitEvent.java
index 140381b80..c3db56207 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/EatDevilFruitEvent.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/EatDevilFruitEvent.java
@@ -1,4 +1,4 @@
-package xyz.pixelatedw.mineminenomi.api.events;
+package xyz.pixelatedw.mineminenomi.api.events.onefruit;
 
 import javax.annotation.Nonnull;
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/InventoryDevilFruitEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/InventoryDevilFruitEvent.java
new file mode 100644
index 000000000..3a2e712c3
--- /dev/null
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/InventoryDevilFruitEvent.java
@@ -0,0 +1,27 @@
+package xyz.pixelatedw.mineminenomi.api.events.onefruit;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import net.minecraft.entity.LivingEntity;
+import net.minecraft.item.Item;
+import net.minecraftforge.event.entity.EntityEvent;
+
+public class InventoryDevilFruitEvent extends EntityEvent {
+private final Item devilFruit;
+	private final String reason;
+
+	public InventoryDevilFruitEvent(@Nullable LivingEntity entity, @Nonnull Item devilFruit,
+			String reason) {
+		super(entity);
+		this.devilFruit = devilFruit;
+		this.reason = reason;
+	}
+
+	public Item getItem() {
+		return this.devilFruit;
+	}
+
+	public String getReason() {
+		return this.reason;
+	}
+}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/LostDevilFruitEvent.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/LostDevilFruitEvent.java
new file mode 100644
index 000000000..33966ddb0
--- /dev/null
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/events/onefruit/LostDevilFruitEvent.java
@@ -0,0 +1,27 @@
+package xyz.pixelatedw.mineminenomi.api.events.onefruit;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import net.minecraft.entity.LivingEntity;
+import net.minecraft.item.Item;
+import net.minecraftforge.event.entity.EntityEvent;
+
+public class LostDevilFruitEvent extends EntityEvent{
+	private final String reason;
+	private final Item devilFruit;
+
+	public LostDevilFruitEvent(@Nullable LivingEntity entity, @Nonnull Item devilFruit,
+			String reason) {
+		super(entity);
+		this.devilFruit = devilFruit;
+		this.reason = reason;
+	}
+
+	public Item getItem() {
+		return this.devilFruit;
+	}
+
+	public String getReason() {
+		return this.reason;
+	}
+}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/api/helpers/DevilFruitHelper.java b/src/main/java/xyz/pixelatedw/mineminenomi/api/helpers/DevilFruitHelper.java
index dbc6d733f..bdaf5742a 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/api/helpers/DevilFruitHelper.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/api/helpers/DevilFruitHelper.java
@@ -34,9 +34,12 @@ import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.vector.Vector3d;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.registries.ForgeRegistries;
 import xyz.pixelatedw.mineminenomi.ModMain;
 import xyz.pixelatedw.mineminenomi.api.OneFruitEntry;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.DroppedDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.InventoryDevilFruitEvent;
 import xyz.pixelatedw.mineminenomi.config.CommonConfig;
 import xyz.pixelatedw.mineminenomi.config.GeneralConfig;
 import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.DevilFruitCapability;
@@ -103,24 +106,30 @@ public class DevilFruitHelper
 
 		List<ItemEntity> droppedItems = WyHelper.getNearbyEntities(entity.blockPosition(), entity.level, REINCARNATION_RANGE, null, ItemEntity.class);
 		droppedItems.removeIf(entry -> !set.contains(entry.getItem().getItem()));
-		if (!droppedItems.isEmpty() && chance <= CommonConfig.INSTANCE.getChanceForDroppedAppleReincarnation())
+		if (!droppedItems.isEmpty() && chance <= CommonConfig.INSTANCE.getChanceForDroppedAppleReincarnation()) 
 		{
 			AkumaNoMiItem fruit = (AkumaNoMiItem) DevilFruitHelper.getDevilFruitItem(props.getDevilFruit());
+			
 			if (CommonConfig.INSTANCE.getRandomizedFruits()) {
-				fruit = fruit.getReverseShiftedFruit(entity.level);				
+				fruit = fruit.getReverseShiftedFruit(entity.level);
 			}
 			droppedItems.get(0).setItem(new ItemStack(fruit));
 			worldData.updateOneFruit(fruit.getFruitKey(), null, OneFruitEntry.Status.DROPPED, "Reincarnated when " + entity.getDisplayName().getString() + " died", true);
+
+			DroppedDevilFruitEvent droppedEvent = new DroppedDevilFruitEvent((PlayerEntity) entity, fruit, "Reincarnated when " + entity.getDisplayName().getString() + " died");
+			MinecraftForge.EVENT_BUS.post(droppedEvent);
+
 			return true;
 		}
 
 		List<PlayerEntity> players = WyHelper.getNearbyPlayers(entity.blockPosition(), entity.level, REINCARNATION_RANGE, null);
 		players.removeIf(entry -> !entry.inventory.hasAnyOf(set));
+
 		if (!players.isEmpty() && chance <= CommonConfig.INSTANCE.getChanceForInventoryAppleReincarnation())
 		{
 			boolean flag = setFruitInInv(players.get(0).inventory, players.get(0), entity, entity.level, props.getDevilFruit());
 			if (flag) {
-				return true;				
+				return true;
 			}
 		}
 
@@ -160,6 +169,7 @@ public class DevilFruitHelper
 	{
 		if (inv == null)
 			return false;
+
 		int stackIndex = WyHelper.getIndexOfItemStack(Items.APPLE, inv);
 		if (stackIndex != -1)
 		{
@@ -169,6 +179,9 @@ public class DevilFruitHelper
 			inv.setItem(stackIndex, new ItemStack(fruit));
 			UUID invOwnerUUID = invOwner != null ? invOwner.getUUID() : null;
 			ExtendedWorldData.get(level).updateOneFruit(fruit.getFruitKey(), invOwnerUUID, OneFruitEntry.Status.INVENTORY, "Reincarnated in " + entity.getDisplayName().getString() + "'s inventory", true);
+
+			InventoryDevilFruitEvent postEvent = new InventoryDevilFruitEvent(invOwner, DevilFruitHelper.getDevilFruitItem(df), "Reincarnated in " + entity.getDisplayName().getString() + "'s inventory");
+			MinecraftForge.EVENT_BUS.post(postEvent);
 			return true;
 		}
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/commands/RemoveDFCommand.java b/src/main/java/xyz/pixelatedw/mineminenomi/commands/RemoveDFCommand.java
index aa8b0b5c0..f6aa0b716 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/commands/RemoveDFCommand.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/commands/RemoveDFCommand.java
@@ -60,9 +60,9 @@ public class RemoveDFCommand
 			IAbilityData abilityDataProps = AbilityDataCapability.get(player);
 			ExtendedWorldData worldData = ExtendedWorldData.get(player.level);
 	
-			worldData.lostOneFruit(devilFruitProps.getDevilFruit(), player.getUUID(), "Removed via Command");
+			worldData.lostOneFruit(devilFruitProps.getDevilFruit(), player, "Removed via Command");
 			if(devilFruitProps.hasYamiPower()) {
-				worldData.lostOneFruit("yami_yami", player.getUUID(), "Removed via Command");
+				worldData.lostOneFruit("yami_yami", player, "Removed via Command");
 			}
 			
 			devilFruitProps.removeDevilFruit();
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsBase.java b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsBase.java
index 5963b5bcd..5a428ba34 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsBase.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsBase.java
@@ -26,7 +26,7 @@ public class EntityStatsBase implements IEntityStats
 {
 	private LivingEntity owner;
 	private double doriki;
-	private int cola = 100, maxCola = 100, ultraCola = 0, loyalty = 0;
+	private int cola = 100, maxCola = 100, ultraCola = 0, loyalty = 0, invulnerableTime = 0;
 	private long bounty, belly, extol;
 	private String faction = "", race = "", subRace = "", fightingStyle = "";
 	private boolean hasShadow = true, hasHeart = true, inCombatMode = false, hasStrawDoll = true, isRogue = false;
@@ -237,6 +237,21 @@ public class EntityStatsBase implements IEntityStats
 		this.loyalty = value;
 	}
 	
+	@Override
+	public int getInvulnerableTime() {
+		return this.invulnerableTime;
+	}
+	
+	@Override
+	public void alterInvulnerableTime(int value) {
+		this.invulnerableTime = Math.max(0, this.invulnerableTime + value);
+	}
+	
+	@Override
+	public void setInvulnerableTime(int value) {
+		this.invulnerableTime = Math.max(value, 0);
+	}
+	
 	/**
 	 * @return The marine rank of the entity or null if the entity is not a marine!
 	 */
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsCapability.java b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsCapability.java
index 2fcc7a6e6..c2f4fe5bb 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsCapability.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/EntityStatsCapability.java
@@ -28,6 +28,7 @@ public class EntityStatsCapability
 				props.putInt("maxCola", instance.getMaxCola());
 				props.putInt("ultraCola", instance.getUltraCola());
 				props.putInt("loyalty", instance.getLoyalty());
+				props.putInt("invulnerableTime", instance.getInvulnerableTime());
 				props.putDouble("damageMultiplier", instance.getDamageMultiplier());
 				props.putLong("bounty", instance.getBounty());
 				props.putLong("belly", instance.getBelly());
@@ -55,6 +56,7 @@ public class EntityStatsCapability
 				instance.setMaxCola(props.getInt("maxCola"));
 				instance.setUltraCola(props.getInt("ultraCola"));
 				instance.setLoyalty(props.getInt("loyalty"));
+				instance.setInvulnerableTime(props.getInt("invulnerableTime"));
 				instance.setDamageMultiplier(props.getDouble("damageMultiplier"));
 				instance.setBelly(props.getLong("belly"));
 				instance.setBounty(props.getLong("bounty"));
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/IEntityStats.java b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/IEntityStats.java
index 745613f4e..81458c6b2 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/IEntityStats.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/data/entity/entitystats/IEntityStats.java
@@ -43,6 +43,11 @@ public interface IEntityStats
 	int getLoyalty();
 	boolean alterLoyalty(int value, StatChangeSource source);
 	void setLoyalty(int value);
+	
+	int getInvulnerableTime();
+	void alterInvulnerableTime(int value);
+	void setInvulnerableTime(int value);
+	
 	MarineRank getMarineRank();
 	boolean hasMarineRank(MarineRank rank);
 	RevolutionaryRank getRevolutionaryRank();
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/data/world/ExtendedWorldData.java b/src/main/java/xyz/pixelatedw/mineminenomi/data/world/ExtendedWorldData.java
index 391ba7c6b..0daa6dbc4 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/data/world/ExtendedWorldData.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/data/world/ExtendedWorldData.java
@@ -12,6 +12,7 @@ import javax.annotation.Nullable;
 
 import com.google.common.base.Strings;
 
+import net.minecraft.entity.Entity;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.nbt.ListNBT;
@@ -20,6 +21,7 @@ import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.WorldSavedData;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.Constants;
 import net.minecraftforge.fml.server.ServerLifecycleHooks;
 import xyz.pixelatedw.mineminenomi.ModMain;
@@ -28,6 +30,9 @@ import xyz.pixelatedw.mineminenomi.api.SoulboundMark;
 import xyz.pixelatedw.mineminenomi.api.crew.Crew;
 import xyz.pixelatedw.mineminenomi.api.crew.Crew.Member;
 import xyz.pixelatedw.mineminenomi.api.crew.JollyRoger;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.InventoryDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.LostDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
 import xyz.pixelatedw.mineminenomi.api.protection.ProtectedArea;
 import xyz.pixelatedw.mineminenomi.wypi.WyHelper;
 
@@ -341,7 +346,7 @@ public class ExtendedWorldData extends WorldSavedData
 				// If the fruit already exists in somebody's inventory and another user tries to eat it, count it as a dupe
 				if(oneFruit.get().getStatus() == OneFruitEntry.Status.INVENTORY && status == OneFruitEntry.Status.IN_USE && !sameOwner)
 					return false;				
-			}
+		}
 			
 			if(!Strings.isNullOrEmpty(message))
 				oneFruit.get().setStatusMessage(message);
@@ -352,14 +357,17 @@ public class ExtendedWorldData extends WorldSavedData
 		return true;
 	}
 	
-	public void lostOneFruit(String key, UUID uuid, String message)
+	public void lostOneFruit(String key, @Nullable LivingEntity entity, String message)
 	{
 		Optional<OneFruitEntry> oneFruit = this.oneFruit.stream().filter((entry) -> entry.getKey().equals(key)).findFirst();
 		if(oneFruit.isPresent())
 		{
 			oneFruit.get().setStatusMessage(message);
-			oneFruit.get().update(uuid, OneFruitEntry.Status.LOST);
+			oneFruit.get().update(entity != null ? entity.getUUID() : null, OneFruitEntry.Status.LOST);
 			this.setDirty();
+			
+			LostDevilFruitEvent lostEvent = new LostDevilFruitEvent(entity, DevilFruitHelper.getDevilFruitItem(oneFruit.get().getKey()), message);
+			MinecraftForge.EVENT_BUS.post(lostEvent);
 		}
 	}
 	
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/AbilityProjectileEntity.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/AbilityProjectileEntity.java
index e816599ab..db0538cff 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/AbilityProjectileEntity.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/AbilityProjectileEntity.java
@@ -17,6 +17,7 @@ import net.minecraft.block.Blocks;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.LivingEntity;
+import net.minecraft.entity.projectile.ProjectileEntity;
 import net.minecraft.entity.projectile.ThrowableEntity;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ShieldItem;
@@ -39,6 +40,7 @@ import net.minecraft.util.math.RayTraceContext.BlockMode;
 import net.minecraft.util.math.RayTraceContext.FluidMode;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.math.vector.Vector3d;
+import net.minecraft.util.math.vector.Vector3i;
 import net.minecraft.world.World;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.registry.IEntityAdditionalSpawnData;
@@ -201,34 +203,53 @@ public class AbilityProjectileEntity extends ThrowableEntity implements IEntityA
 				return;
 			}
 
-			if(this.collisionSizeX > 0 && this.collisionSizeY > 0 && this.collisionSizeZ > 0)
-			{
-				Vector3d vec31 = new Vector3d(this.getX(), this.getY(), this.getZ());
-				Vector3d vec3 = new Vector3d(this.getX() + this.getDeltaMovement().x, this.getY() + this.getDeltaMovement().y, this.getZ() + this.getDeltaMovement().z);
-				RayTraceResult hit = this.level.clip(new RayTraceContext(vec3, vec31, BlockMode.OUTLINE, FluidMode.ANY, this));
-		
-				Predicate<Entity> predicate = ModEntityPredicates.getEnemyFactions(this.getThrower())
-					.and(target -> {
-						if(target instanceof LivingEntity && target.canBeCollidedWith() && target != this.getThrower())
-							return ((LivingEntity) target).canSee(this);
-						return true;
-					})
-					.and(target -> target != this);
-				List<Entity> list = WyHelper.getNearbyEntities(this.blockPosition(), this.level, this.collisionSizeX, this.collisionSizeY, this.collisionSizeZ, predicate, Entity.class);
-				Entity target = list.stream().findAny().orElse(null);
-				
-				if (target != null) {
-					hit = new EntityRayTraceResult(target);					
+			Vector3d startPos = new Vector3d(super.getX(), super.getY(), super.getZ());
+			Vector3d endPos = new Vector3d(super.getX() + super.getDeltaMovement().x, super.getY() + super.getDeltaMovement().y, super.getZ() + super.getDeltaMovement().z);
+			
+			RayTraceResult hit = this.level.clip(new RayTraceContext(startPos, endPos, BlockMode.OUTLINE, FluidMode.ANY, this));
+			
+			Predicate<Entity> entityPredicate = target -> {
+				if(target == this) {
+					return false;
 				}
-				
-				if (hit.getType() == RayTraceResult.Type.ENTITY) {
-					this.onHit(hit);					
+
+				if (target instanceof LivingEntity && target.canBeCollidedWith() && target != this.getThrower() && ModEntityPredicates.getEnemyFactions(this.getThrower()).test(target)) {
+					return ((LivingEntity) target).canSee(this);
+				}
+				else if(target instanceof ProjectileEntity && ((ProjectileEntity)target).getOwner() != null && ((ProjectileEntity)target).getOwner() == this.getThrower()) {
+					return false;
 				}
+
+				return true;
+			};
+			
+			Predicate<BlockState> blockPredicate = (state) -> {
+				return !state.isAir();
+			};
+			
+			Vector3i radius = new Vector3i(this.getBoundingBox().getXsize() / 2.0D, this.getBoundingBox().getYsize() / 2.0D, this.getBoundingBox().getZsize() / 2.0D);
+			
+			List<Entity> entityList = WyHelper.getNearbyEntities(super.blockPosition(), super.level, radius.getX(), radius.getY(), radius.getZ(), entityPredicate, Entity.class);
+			List<BlockPos> blockList = WyHelper.getNearbyBlocks(super.blockPosition(), super.level, radius.getX(), radius.getY(), radius.getZ(), blockPredicate);
+
+			Entity entityTarget = entityList.stream().findAny().orElse(null);
+			BlockPos blockTarget = blockList.stream().findAny().orElse(null);
+
+			if (entityTarget != null) {
+				hit = new EntityRayTraceResult(entityTarget);					
+			} else if (blockTarget != null) {
+				hit = new BlockRayTraceResult(new Vector3d(blockTarget.getX(), blockTarget.getY(), blockTarget.getZ()), null, blockTarget, false);
+			}
+			
+			if (hit.getType() == RayTraceResult.Type.ENTITY || hit.getType() == RayTraceResult.Type.BLOCK) {
+				this.onHit(hit);
 			}
 			
-			if(this.tickCount % this.getTargetResetTime() == 0)
+			if(this.tickCount % this.getTargetResetTime() == 0) {
 				this.clearTargets();
+			}
 		}
+		
 		this.onTickEvent.onTick();
 	}
 
@@ -387,22 +408,23 @@ public class AbilityProjectileEntity extends ThrowableEntity implements IEntityA
 								hitEntity.push(v3d.x, 0.1D, v3d.z);
 							}
 						}
-
-						if (!this.canPassThroughEntities)
-						{
+						
+						if (this.changeHurtTime) {
+							IEntityStats entityStatsProps = EntityStatsCapability.get(hitEntity);
+							
+							entityStatsProps.setInvulnerableTime(this.hurtTime);
+							
+							hitEntity.invulnerableTime = 0;
+						}
+						
+						if (!this.canPassThroughEntities) {
 							this.remove();
 							return;
-						}
-						else
-						{
+						} else {
 							this.targets.add(entityHit.getEntity().getId());
 							this.entityDamaged = false;
 						}
 					}
-
-					if (this.changeHurtTime) {
-						hitEntity.invulnerableTime = this.hurtTime;						
-					}
 				}
 				else if (entityHit.getEntity() instanceof AbilityProjectileEntity)
 				{
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoBazookaProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoBazookaProjectile.java
index 674f9b8c5..714d5e85d 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoBazookaProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoBazookaProjectile.java
@@ -23,7 +23,6 @@ public class GomuGomuNoBazookaProjectile extends AbilityProjectileEntity
 
 		this.setDamage(20);
 		this.setMaxLife(5);
-		this.setHurtTime(10);
 
 		this.setDamageSource(((AbilityDamageSource)this.getDamageSource()).setSourceElement(SourceElement.RUBBER));
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoGrizzlyMagnumProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoGrizzlyMagnumProjectile.java
index 650da8c3e..653adfe52 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoGrizzlyMagnumProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoGrizzlyMagnumProjectile.java
@@ -24,7 +24,6 @@ public class GomuGomuNoGrizzlyMagnumProjectile extends AbilityProjectileEntity
 		this.setDamage(40);
 		this.setMaxLife(10);
 		this.setPassThroughEntities();
-		this.setHurtTime(10);
 
 		this.setDamageSource(((AbilityDamageSource)this.getDamageSource()).setSourceElement(SourceElement.RUBBER));
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoJetBazookaProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoJetBazookaProjectile.java
index e738f62ea..e1baa724b 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoJetBazookaProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoJetBazookaProjectile.java
@@ -23,7 +23,6 @@ public class GomuGomuNoJetBazookaProjectile extends AbilityProjectileEntity
 
 		this.setDamage(30);
 		this.setMaxLife(5);
-		this.setHurtTime(10);
 
 		this.setDamageSource(((AbilityDamageSource)this.getDamageSource()).setSourceElement(SourceElement.RUBBER));
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoLeoBazookaProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoLeoBazookaProjectile.java
index 34ca7c796..4f85f77d8 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoLeoBazookaProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/gomu/GomuGomuNoLeoBazookaProjectile.java
@@ -24,7 +24,6 @@ public class GomuGomuNoLeoBazookaProjectile extends AbilityProjectileEntity
 		this.setDamage(70);
 		this.setMaxLife(10);
 		this.setPassThroughEntities();
-		this.setHurtTime(10);
 
 		this.setDamageSource(((AbilityDamageSource)this.getDamageSource()).setSourceElement(SourceElement.RUBBER));
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/goro/LightningEntity.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/goro/LightningEntity.java
index 86a7f947d..71ca8f321 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/goro/LightningEntity.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/goro/LightningEntity.java
@@ -194,7 +194,6 @@ public class LightningEntity extends Entity
 		explosion.setDestroyBlocks(this.explosionDestroysBlocks);
 		explosion.setHeightDifference(this.heightDifference);
 		explosion.setFireAfterExplosion(true);
-		explosion.setAlwaysDamage(true);
 		explosion.setSmokeParticles(new LightningExplosionParticleEffect(this.explosionSize + 1));
 		explosion.setExplosionSound(false);
 		explosion.setDamageEntities(true);
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/pika/YasakaniNoMagatamaProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/pika/YasakaniNoMagatamaProjectile.java
index 74a7b41d2..d900ae5f5 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/pika/YasakaniNoMagatamaProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/pika/YasakaniNoMagatamaProjectile.java
@@ -27,7 +27,6 @@ public class YasakaniNoMagatamaProjectile extends AbilityProjectileEntity
 		super(PikaProjectiles.YASAKANI_NO_MAGATAMA.get(), world, player, ability);
 		
 		this.setDamage(4);
-		this.setHurtTime(10);
 
 		this.onBlockImpactEvent = this::onBlockImpactEvent;
 		this.onTickEvent = this::onTickEvent;
@@ -38,7 +37,6 @@ public class YasakaniNoMagatamaProjectile extends AbilityProjectileEntity
 		ExplosionAbility explosion = AbilityHelper.newExplosion(this.getThrower(), this.level, hit.getX(), hit.getY(), hit.getZ(), 3);
 		explosion.setStaticDamage(4);
 		explosion.disableExplosionKnockback();
-		explosion.setAlwaysDamage(true);
 		explosion.setSmokeParticles(new CommonExplosionParticleEffect(3));
 		explosion.doExplosion();
 	}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/swordsman/SwordsmanProjectiles.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/swordsman/SwordsmanProjectiles.java
index a38e2f069..9add0fc76 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/swordsman/SwordsmanProjectiles.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/swordsman/SwordsmanProjectiles.java
@@ -14,17 +14,14 @@ import xyz.pixelatedw.mineminenomi.renderers.abilities.AbilityProjectileRenderer
 import xyz.pixelatedw.mineminenomi.wypi.WyRegistry;
 
 @Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
-public class SwordsmanProjectiles
-{
-	public static final RegistryObject<EntityType<YakkodoriProjectile>> YAKKODORI = WyRegistry.registerEntityType("Yakkodori", () -> WyRegistry.createEntityType(YakkodoriProjectile::new).sized(0.5f, 1.5f).build(ModMain.PROJECT_ID + ":yakkodori"));
-	public static final RegistryObject<EntityType<SanbyakurokujuPoundHoProjectile>> SANBYAKUROKUJU_POUND_HO = WyRegistry.registerEntityType("Sanbyakurokuju Pound Ho", () -> WyRegistry.createEntityType(SanbyakurokujuPoundHoProjectile::new).sized(2.5f, 0.5f).build(ModMain.PROJECT_ID + ":sanbyakurokuju_pound_ho"));
+public class SwordsmanProjectiles {
+	public static final RegistryObject<EntityType<YakkodoriProjectile>> YAKKODORI = WyRegistry.registerEntityType("Yakkodori", () -> WyRegistry.createEntityType(YakkodoriProjectile::new).sized(0.5F, 3.0F).build(ModMain.PROJECT_ID + ":yakkodori"));
+	public static final RegistryObject<EntityType<SanbyakurokujuPoundHoProjectile>> SANBYAKUROKUJU_POUND_HO = WyRegistry.registerEntityType("Sanbyakurokuju Pound Ho", () -> WyRegistry.createEntityType(SanbyakurokujuPoundHoProjectile::new).sized(3.0F, 0.5F).build(ModMain.PROJECT_ID + ":sanbyakurokuju_pound_ho"));
 
 	@OnlyIn(Dist.CLIENT)
 	@SubscribeEvent
-	public static void registerEntityRenderers(FMLClientSetupEvent event)
-	{
-		RenderingRegistry.registerEntityRenderingHandler(YAKKODORI.get(), new AbilityProjectileRenderer.Factory(new CubeModel()).setColor("#bbf7b4").setScale(.4, 6, .4).setTranslate(0, -0.1, 0));
-		RenderingRegistry.registerEntityRenderingHandler(SANBYAKUROKUJU_POUND_HO.get(), new AbilityProjectileRenderer.Factory(new CubeModel()).setColor("#bbf7b4").setScale(6, .4, 1.5));
+	public static void registerEntityRenderers(FMLClientSetupEvent event) {
+		RenderingRegistry.registerEntityRenderingHandler(YAKKODORI.get(), new AbilityProjectileRenderer.Factory(new CubeModel()).setColor("#bbf7b4").setScale(0.5D, 6.0D, 0.5D));
+		RenderingRegistry.registerEntityRenderingHandler(SANBYAKUROKUJU_POUND_HO.get(), new AbilityProjectileRenderer.Factory(new CubeModel()).setColor("#bbf7b4").setScale(6.0D, 0.5D, 1.5D));
 	}
 }
-
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/toriphoenix/PhoenixGoenProjectile.java b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/toriphoenix/PhoenixGoenProjectile.java
index 4e4cbecaa..c80e3b965 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/toriphoenix/PhoenixGoenProjectile.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/entities/projectiles/toriphoenix/PhoenixGoenProjectile.java
@@ -25,7 +25,6 @@ public class PhoenixGoenProjectile extends AbilityProjectileEntity
 		this.setDamage(10);
 		this.setCanGetStuckInGround();
 		this.setMaxLife(30);
-		this.setHurtTime(10);
 		
 		this.lookVec = lookVec;
 		this.onEntityImpactEvent = this::onEntityImpactEvent;
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/events/abilities/AbilitiesEvents.java b/src/main/java/xyz/pixelatedw/mineminenomi/events/abilities/AbilitiesEvents.java
index 33c29f0f4..939ba9578 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/events/abilities/AbilitiesEvents.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/events/abilities/AbilitiesEvents.java
@@ -54,20 +54,27 @@ import xyz.pixelatedw.mineminenomi.data.entity.ability.AbilityDataCapability;
 import xyz.pixelatedw.mineminenomi.data.entity.ability.IAbilityData;
 import xyz.pixelatedw.mineminenomi.data.entity.devilfruit.DevilFruitCapability;
 import xyz.pixelatedw.mineminenomi.data.entity.entitystats.EntityStatsCapability;
+import xyz.pixelatedw.mineminenomi.data.entity.entitystats.IEntityStats;
 import xyz.pixelatedw.mineminenomi.entities.projectiles.AbilityProjectileEntity;
 import xyz.pixelatedw.mineminenomi.init.ModDamageSource;
 import xyz.pixelatedw.mineminenomi.init.ModEntityPredicates;
 import xyz.pixelatedw.mineminenomi.wypi.WyDebug;
 
 @Mod.EventBusSubscriber(modid = ModMain.PROJECT_ID)
-public class AbilitiesEvents
-{
+public class AbilitiesEvents {
 	@SubscribeEvent
-	public static void onLivingUpdate(LivingUpdateEvent event)
-	{
-		if (event.getEntityLiving() instanceof PlayerEntity)
-		{
-			PlayerEntity player = (PlayerEntity) event.getEntityLiving();
+	public static void onLivingUpdate(LivingUpdateEvent event) {
+		LivingEntity entity = event.getEntityLiving();
+		
+		IEntityStats statsProps = EntityStatsCapability.get(entity);
+		
+		if (!entity.level.isClientSide && statsProps.getInvulnerableTime() > 0) {
+			statsProps.alterInvulnerableTime(-1);
+		}
+		
+		if (event.getEntityLiving() instanceof PlayerEntity) {
+			PlayerEntity player = (PlayerEntity) entity;
+			
 			IAbilityData ablProps = AbilityDataCapability.get(player);
 
 			//For debug reasons, literally a copy pasted but automated version of forge's CommandTps
@@ -75,6 +82,7 @@ public class AbilitiesEvents
 				if (FGCommand.SHOW_TPS && !player.level.isClientSide && player.tickCount % 20 == 0) {
 					DecimalFormat TIME_FORMATTER = new DecimalFormat("########0.000");
 					RegistryKey<World> dim = World.OVERWORLD;
+					
 					long[] times = player.getServer().getTickTime(dim);
 
 					if (times == null)
@@ -87,35 +95,31 @@ public class AbilitiesEvents
 
 					double worldTickTime = (sum / times.length) * 1.0E-6D;
 					double worldTPS = Math.min(1000.0 / worldTickTime, 20);
+					
 					player.sendMessage(new TranslationTextComponent("commands.forge.tps.summary.all", TIME_FORMATTER.format(worldTickTime), TIME_FORMATTER.format(worldTPS)), Util.NIL_UUID);
 				}
 			}
 			
-			for (Ability ability : ablProps.getUnlockedAbilities())
-			{
-				try
-				{
-					if (ability instanceof PassiveAbility)
+			for (Ability ability : ablProps.getUnlockedAbilities()) {
+				try {
+					if (ability instanceof PassiveAbility) {
 						((PassiveAbility) ablProps.getUnlockedAbility(ability)).tick(player);
-					else if (ability instanceof TempoAbility)
+					} else if (ability instanceof TempoAbility) {
 						((TempoAbility) ablProps.getUnlockedAbility(ability)).tick(player);
-				}
-				catch (Exception e)
-				{
+					}
+				} catch (Exception e) {
 					e.printStackTrace();
+					
 					ability.startCooldown(player);
 				}
 			}
 
-			for (Ability ability : ablProps.getEquippedAbilities())
-			{
-				try
-				{
+			for (Ability ability : ablProps.getEquippedAbilities()) {
+				try {
 					ablProps.getEquippedAbility(ability).tick(player);
-				}
-				catch (Exception e)
-				{
+				} catch (Exception e) {
 					e.printStackTrace();
+					
 					ability.startCooldown(player);
 				}
 			}
@@ -345,7 +349,15 @@ public class AbilitiesEvents
 			IAbilityData ablProps = AbilityDataCapability.get(entity);
 			DamageSource damageSource = event.getSource();
 			LivingEntity sourceOwner = damageSource.getDirectEntity() instanceof LivingEntity ? (LivingEntity) damageSource.getDirectEntity() : null;
-
+			
+			IEntityStats entityStatsProps = EntityStatsCapability.get(entity);
+			
+			if (entityStatsProps.getInvulnerableTime() > 0) {
+				event.setCanceled(true);
+				
+				return;
+			}
+			
 			// TODO(wynd) - Possibly removed
 //			if (!CommonConfig.INSTANCE.isAbilityInvulnerabilityEnabled())
 //				return;
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/events/devilfruits/OneFruitPerWorldEvents.java b/src/main/java/xyz/pixelatedw/mineminenomi/events/devilfruits/OneFruitPerWorldEvents.java
index 49e1e1975..273a8abff 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/events/devilfruits/OneFruitPerWorldEvents.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/events/devilfruits/OneFruitPerWorldEvents.java
@@ -3,7 +3,7 @@ package xyz.pixelatedw.mineminenomi.events.devilfruits;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
-
+import java.util.UUID;
 import net.minecraft.block.LeavesBlock;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.screen.inventory.ContainerScreen;
@@ -32,6 +32,7 @@ import net.minecraft.world.World;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import net.minecraftforge.client.event.GuiScreenEvent;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.Constants;
 import net.minecraftforge.event.entity.EntityJoinWorldEvent;
 import net.minecraftforge.event.entity.item.ItemExpireEvent;
@@ -47,6 +48,9 @@ import net.minecraftforge.registries.ForgeRegistries;
 import xyz.pixelatedw.mineminenomi.ModMain;
 import xyz.pixelatedw.mineminenomi.api.OneFruitEntry;
 import xyz.pixelatedw.mineminenomi.api.abilities.AbilityCategory;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.DroppedDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.InventoryDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.LostDevilFruitEvent;
 import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
 import xyz.pixelatedw.mineminenomi.config.CommonConfig;
 import xyz.pixelatedw.mineminenomi.data.entity.ability.AbilityDataCapability;
@@ -92,9 +96,12 @@ public class OneFruitPerWorldEvents
 
 				if (df != null)
 				{
-					boolean flag = ExtendedWorldData.get(event.getWorld()).updateOneFruit(df.getFruitKey(), null, OneFruitEntry.Status.DROPPED);
+					boolean flag = ExtendedWorldData.get(event.getWorld()).updateOneFruit(df.getFruitKey(), null, OneFruitEntry.Status.DROPPED, "Dropped from leaves. Sheared by " + event.getPlayer().getDisplayName());
 					if(flag)
 						event.getWorld().addFreshEntity(new ItemEntity((World) event.getWorld(), event.getPos().getX(), event.getPos().getY(), event.getPos().getZ(), new ItemStack(df)));
+					
+					DroppedDevilFruitEvent postEvent = new DroppedDevilFruitEvent(event.getPlayer(), df, "Dropped from leaves. Sheared by " + event.getPlayer().getDisplayName());
+					MinecraftForge.EVENT_BUS.post(postEvent);
 				}
 			}
 		}
@@ -212,7 +219,7 @@ public class OneFruitPerWorldEvents
 			PlayerEntity player = (PlayerEntity) event.getEntityLiving();
 			IDevilFruit fruitProps = DevilFruitCapability.get(player);
 			ExtendedWorldData worldData = ExtendedWorldData.get(player.level);
-			
+
 			IDevilFruit props = DevilFruitCapability.get(player);
 			boolean fruitRespawned = DevilFruitHelper.respawnDevilFruit(player, props);
 
@@ -223,7 +230,7 @@ public class OneFruitPerWorldEvents
 				// circulation
 				if (!fruitProps.hasDevilFruit(ModAbilities.YOMI_YOMI_NO_MI) || YomiMorphInfo.INSTANCE.isActive(player)) {
 					if (DevilFruitHelper.canDevilFruitRespawn()) {
-						worldData.lostOneFruit(fruitProps.getDevilFruit(), player.getUUID(), "User's death");
+						worldData.lostOneFruit(fruitProps.getDevilFruit(), player, "User died");
 					}
 				}
 
@@ -231,10 +238,10 @@ public class OneFruitPerWorldEvents
 				// from circulation
 				if (fruitProps.hasYamiPower()) {
 					if (DevilFruitHelper.canDevilFruitRespawn()) {
-						worldData.lostOneFruit(ModAbilities.YAMI_YAMI_NO_MI.getFruitKey(), player.getUUID(), "User's death");
+						worldData.lostOneFruit(ModAbilities.YAMI_YAMI_NO_MI.getFruitKey(), player, "User died");
 					}
 				}
-				
+
 				ArrayList<ItemStack> slots = new ArrayList<ItemStack>();
 				slots.addAll(player.inventory.items);
 				slots.addAll(player.inventory.offhand);
@@ -244,10 +251,13 @@ public class OneFruitPerWorldEvents
 					{
 						String key = ((AkumaNoMiItem) invStack.getItem()).getFruitKey();
 						if(worldData.isFruitInUse(key)) {
-							invStack.shrink(invStack.getCount());							
+							invStack.shrink(invStack.getCount());
 						}
 						else {
-							worldData.updateOneFruit(key, player.getUUID(), OneFruitEntry.Status.DROPPED);							
+							worldData.updateOneFruit(key, player.getUUID(), OneFruitEntry.Status.DROPPED);
+
+							DroppedDevilFruitEvent postEvent = new DroppedDevilFruitEvent(player, DevilFruitHelper.getDevilFruitItem(props.getDevilFruit()), "User died");
+							MinecraftForge.EVENT_BUS.post(postEvent);
 						}
 					}
 				}
@@ -281,6 +291,7 @@ public class OneFruitPerWorldEvents
 						// If the player who joins is not the one owning the DF (hopefully due to away time) remove their fruit
 						boolean somebodyElseHasFruit = entry.getOwner().isPresent() && !entry.getOwner().get().equals(player.getUUID());
 						boolean nobodyHasFruit = !entry.getOwner().isPresent() && entry.getStatus() == OneFruitEntry.Status.LOST;
+
 						if(somebodyElseHasFruit || nobodyHasFruit)
 						{
 							if (entry.getKey().equals(fruitData.getDevilFruit()))
@@ -383,8 +394,10 @@ public class OneFruitPerWorldEvents
 					else
 					{
 						ExtendedWorldData worldProps = ExtendedWorldData.get(player.level);
-						boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), player.getUUID(), OneFruitEntry.Status.INVENTORY);
+						boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), player.getUUID(), OneFruitEntry.Status.INVENTORY, "Picked up from ground");
 						event.setCanceled(!flag);
+						InventoryDevilFruitEvent inventoryEvent = new InventoryDevilFruitEvent(player, stack.getItem(), "Picked up from ground");
+						MinecraftForge.EVENT_BUS.post(inventoryEvent);
 					}
 				}
 				else
@@ -395,14 +408,18 @@ public class OneFruitPerWorldEvents
 			else {
 				if(stack.getItem() instanceof AkumaNoMiItem) {
 					ExtendedWorldData worldProps = ExtendedWorldData.get(player.level);
-					boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), player.getUUID(), OneFruitEntry.Status.INVENTORY);
+					boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), player.getUUID(), OneFruitEntry.Status.INVENTORY, "Picked up from ground");
 					event.setCanceled(!flag);
+
+					InventoryDevilFruitEvent inventoryEvent = new InventoryDevilFruitEvent(player, stack.getItem(), "Picked up from ground");
+					MinecraftForge.EVENT_BUS.post(inventoryEvent);
+
 					OneFruitPerWorldEvents.checkPlayerInventory(player);
 				}
 			}
 		}
 	}
-	
+
 	@SubscribeEvent
 	public static void onDevilFruitDropped(EntityJoinWorldEvent event) {
 		if (CommonConfig.INSTANCE.hasOneFruitPerWorldSimpleLogic())
@@ -410,15 +427,28 @@ public class OneFruitPerWorldEvents
 			if(event.getEntity() instanceof ItemEntity) {
 				ItemEntity entity = ((ItemEntity)event.getEntity());
 				ItemStack stack = entity.getItem();
+				UUID thrower = entity.getThrower();
+
+				PlayerEntity player = null;
+				if(thrower != null){
+					player = event.getWorld().getPlayerByUUID(thrower);
+				}
+
 				if(!stack.isEmpty() && stack.getItem() instanceof AkumaNoMiItem) {
 					ExtendedWorldData worldProps = ExtendedWorldData.get(event.getWorld());
-					boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), entity.getThrower(), OneFruitEntry.Status.DROPPED, null, true);
-					event.setCanceled(!flag);					
+				
+					boolean flag = worldProps.updateOneFruit(((AkumaNoMiItem) stack.getItem()).getFruitKey(), entity.getThrower(), OneFruitEntry.Status.DROPPED, "Fruit got added to world " + (player == null ? "" : "by " + player.getDisplayName().getString()), true);
+
+					event.setCanceled(!flag);
+
+					// Player might be null but that is fine
+					DroppedDevilFruitEvent postEvent = new DroppedDevilFruitEvent(player, stack.getItem(), "Fruit got added to world " + (player == null ? "" : "by " + player.getDisplayName().getString()));
+					MinecraftForge.EVENT_BUS.post(postEvent);
 				}
 			}
 		}
 	}
-	
+
 //	@SubscribeEvent
 //	public static void onDevilFruitDropped(ItemTossEvent event)
 //	{
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiBoxItem.java b/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiBoxItem.java
index 54021e527..0d92a6d57 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiBoxItem.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiBoxItem.java
@@ -11,7 +11,9 @@ import net.minecraft.util.Hand;
 import net.minecraft.util.Util;
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraft.world.World;
+import net.minecraftforge.common.MinecraftForge;
 import xyz.pixelatedw.mineminenomi.api.OneFruitEntry;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.InventoryDevilFruitEvent;
 import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
 import xyz.pixelatedw.mineminenomi.data.world.ExtendedWorldData;
 import xyz.pixelatedw.mineminenomi.init.ModCreativeTabs;
@@ -86,7 +88,11 @@ public class AkumaNoMiBoxItem extends Item
 				{
 					player.inventory.add(new ItemStack(randomFruit));
 					ExtendedWorldData worldProps = ExtendedWorldData.get(player.level);
+
 					worldProps.updateOneFruit(((AkumaNoMiItem) randomFruit).getFruitKey(), player.getUUID(), OneFruitEntry.Status.INVENTORY, "Obtained from " + itemStack.getDisplayName().getString());
+					InventoryDevilFruitEvent event = new InventoryDevilFruitEvent(player, randomFruit, "Obtained from " + itemStack.getDisplayName().getString());
+					MinecraftForge.EVENT_BUS.post(event);
+
 					return new ActionResult<>(ActionResultType.SUCCESS, player.getItemInHand(hand));
 				}
 			}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiItem.java b/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiItem.java
index c31a3b619..a57ec8afa 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiItem.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/items/AkumaNoMiItem.java
@@ -40,7 +40,7 @@ import xyz.pixelatedw.mineminenomi.api.OneFruitEntry.Status;
 import xyz.pixelatedw.mineminenomi.api.abilities.AbilityCore;
 import xyz.pixelatedw.mineminenomi.api.enums.AbilityCommandGroup;
 import xyz.pixelatedw.mineminenomi.api.enums.FruitType;
-import xyz.pixelatedw.mineminenomi.api.events.EatDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.EatDevilFruitEvent;
 import xyz.pixelatedw.mineminenomi.api.helpers.AbilityHelper;
 import xyz.pixelatedw.mineminenomi.api.helpers.ItemsHelper;
 import xyz.pixelatedw.mineminenomi.config.CommonConfig;
@@ -145,13 +145,13 @@ public class AkumaNoMiItem extends Item implements IFruitColor
 	
 			if(CommonConfig.INSTANCE.isYamiPowerEnabled())
 			{
-				// If the player eats any fruit besides yami and it currently doesn't have Yami ate: death
+				// If the player eats any fruit besides yami and they currently don't have Yami eaten: death
 				// ex: mera + pika = death
 				if(hasFruit && eatenItem != ModAbilities.YAMI_YAMI_NO_MI && !hasYami)
 				{
 					this.applyCurseDeath(player);
 					itemStack.shrink(1);
-					worldData.lostOneFruit(eatenFruit, player.getUUID(), "Devil Fruit's Curse");
+					worldData.lostOneFruit(eatenFruit, player, "Devil Fruits Curse");
 					return itemStack;
 				}
 				// If the player eats Yami while already having Yami: death
@@ -160,16 +160,16 @@ public class AkumaNoMiItem extends Item implements IFruitColor
 				{
 					this.applyCurseDeath(player);
 					itemStack.shrink(1);
-					worldData.lostOneFruit(eatenFruit, player.getUUID(), "Devil Fruit's Curse");
+					worldData.lostOneFruit(eatenFruit, player, "Devil Fruits Curse");
 					return itemStack;
 				}
-				// If any fruit is ate while the user has a fruit (different than yami) and yami power: death
+				// If any fruit is eaten while the user has a fruit (different than yami) and yami power: death
 				// ex: pika + yami + anything = death
 				else if((hasFruit && !devilFruitProps.getDevilFruit().equalsIgnoreCase("yami_yami")) && devilFruitProps.hasYamiPower())
 				{
 					this.applyCurseDeath(player);
 					itemStack.shrink(1);
-					worldData.lostOneFruit(eatenFruit, player.getUUID(), "Devil Fruit's Curse");
+					worldData.lostOneFruit(eatenFruit, player, "Devil Fruits Curse");
 					return itemStack;
 				}
 			}
@@ -320,7 +320,8 @@ public class AkumaNoMiItem extends Item implements IFruitColor
 //		}
 
 		boolean shouldRemove = false;
-		
+		String removeReason = null;
+
 		List<BlockPos> blockPosList = WyHelper.getNearbyTileEntities(entity.blockPosition(), entity.level, 2);
 
 		for (BlockPos pos : blockPosList)
@@ -328,22 +329,27 @@ public class AkumaNoMiItem extends Item implements IFruitColor
 			TileEntity te = entity.level.getBlockEntity(pos);
 
 			if (te instanceof HopperTileEntity)
-			{				
+			{
 				shouldRemove = true;
+				removeReason = "Thrown into hopper";
 				break;
 			}
 		}
 
 		List<Entity> hopperMinecarts = WyHelper.getNearbyEntities(entity.blockPosition(), entity.level, 0.5, null, HopperMinecartEntity.class);
 
-		if(hopperMinecarts.size() > 0)
+		if(hopperMinecarts.size() > 0) {
 			shouldRemove = true;
+			removeReason = "Thrown into Hopper Minecart";
+		}
 		
 		List<Entity> foxes = WyHelper.getNearbyEntities(entity.blockPosition(), entity.level, 1.5, null, FoxEntity.class);
 
-		if(foxes.size() > 0)
+		if(foxes.size() > 0) {
 			shouldRemove = true;
-		
+			removeReason = "Fox took fruit";
+		}
+
 		if(shouldRemove) 
 		{
 			entity.remove();
@@ -354,10 +360,10 @@ public class AkumaNoMiItem extends Item implements IFruitColor
 				if(thrower != null)
 					thrower.inventory.add(itemStack);
 				else
-					worldData.updateOneFruit(fruitKey, null, OneFruitEntry.Status.LOST);
+					worldData.lostOneFruit(fruitKey, null, removeReason); 
 			}
 			else
-				worldData.updateOneFruit(fruitKey, null, OneFruitEntry.Status.LOST);
+				worldData.lostOneFruit(fruitKey, null, removeReason);
 		}
 
 		return false;
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CCreateCrewPacket.java b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CCreateCrewPacket.java
index 403ab03b3..a3b3950da 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CCreateCrewPacket.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CCreateCrewPacket.java
@@ -8,9 +8,11 @@ import net.minecraft.util.Util;
 import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraft.util.text.TranslationTextComponent;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.network.NetworkDirection;
 import net.minecraftforge.fml.network.NetworkEvent;
 import xyz.pixelatedw.mineminenomi.api.crew.Crew;
+import xyz.pixelatedw.mineminenomi.api.events.CrewEvent;
 import xyz.pixelatedw.mineminenomi.config.CommonConfig;
 import xyz.pixelatedw.mineminenomi.data.entity.entitystats.EntityStatsCapability;
 import xyz.pixelatedw.mineminenomi.data.entity.entitystats.IEntityStats;
@@ -63,21 +65,25 @@ public class CCreateCrewPacket
 				if(!hasSakeBottle || isAlreadyInCrew || !props.isPirate()) {
 					return;					
 				}
-				
 				Crew crew = new Crew(message.name, player);
-				worldProps.addCrew(crew);
-				crew.create(player.level);
-
-				if (CommonConfig.INSTANCE.isCrewWorldMessageEnabled())
+				
+				CrewEvent.Create event = new CrewEvent.Create(player, crew);
+				if(!MinecraftForge.EVENT_BUS.post(event))
 				{
-					TranslationTextComponent newCrewMsg = new TranslationTextComponent(ModI18n.CREW_MESSAGE_NEW_CREW, message.name);
-					for (PlayerEntity target : player.level.players())
+					worldProps.addCrew(crew);
+					crew.create(player.level);
+
+					if (CommonConfig.INSTANCE.isCrewWorldMessageEnabled())
 					{
-						target.sendMessage(new StringTextComponent(TextFormatting.GOLD + newCrewMsg.getString()), Util.NIL_UUID);
+						TranslationTextComponent newCrewMsg = new TranslationTextComponent(ModI18n.CREW_MESSAGE_NEW_CREW, message.name);
+						for (PlayerEntity target : player.level.players())
+						{
+							target.sendMessage(new StringTextComponent(TextFormatting.GOLD + newCrewMsg.getString()), Util.NIL_UUID);
+						}
 					}
+
+					WyNetwork.sendToAll(new SSyncWorldDataPacket(worldProps));
 				}
-				
-				WyNetwork.sendToAll(new SSyncWorldDataPacket(worldProps));
 			});
 		}
 		ctx.get().setPacketHandled(true);
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CKickFromCrewPacket.java b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CKickFromCrewPacket.java
index 672c0049d..35862bc17 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CKickFromCrewPacket.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CKickFromCrewPacket.java
@@ -6,9 +6,12 @@ import java.util.function.Supplier;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.text.TranslationTextComponent;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.network.NetworkDirection;
 import net.minecraftforge.fml.network.NetworkEvent;
+
 import xyz.pixelatedw.mineminenomi.api.crew.Crew;
+import xyz.pixelatedw.mineminenomi.api.events.CrewEvent;
 import xyz.pixelatedw.mineminenomi.api.helpers.FactionHelper;
 import xyz.pixelatedw.mineminenomi.data.world.ExtendedWorldData;
 import xyz.pixelatedw.mineminenomi.init.ModI18n;
@@ -52,11 +55,15 @@ public class CKickFromCrewPacket
 				
 				if(crew != null && crew.hasMember(uuid))
 				{
-					FactionHelper.sendMessageToCrew(sender.level, crew, new TranslationTextComponent(ModI18n.CREW_MESSAGE_KICKED, crew.getMember(uuid).getUsername()));
-					worldData.removeCrewMember(crew, uuid);
-					if(memberPlayer != null)
-						WyNetwork.sendTo(new SSyncWorldDataPacket(worldData), memberPlayer);
-					FactionHelper.sendUpdateMessageToCrew(sender.level, crew);
+					CrewEvent.Kick event = new CrewEvent.Kick(memberPlayer, crew);
+					if(!MinecraftForge.EVENT_BUS.post(event))
+					{
+						FactionHelper.sendMessageToCrew(sender.level, crew, new TranslationTextComponent(ModI18n.CREW_MESSAGE_KICKED, crew.getMember(uuid).getUsername()));
+						worldData.removeCrewMember(crew, uuid);
+						if(memberPlayer != null)
+							WyNetwork.sendTo(new SSyncWorldDataPacket(worldData), memberPlayer);
+						FactionHelper.sendUpdateMessageToCrew(sender.level, crew);
+					}
 				}
 			});	
 		}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CUpdateJollyRogerPacket.java b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CUpdateJollyRogerPacket.java
index c7e65de59..54db199cd 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CUpdateJollyRogerPacket.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/crew/CUpdateJollyRogerPacket.java
@@ -5,10 +5,12 @@ import java.util.function.Supplier;
 
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.network.PacketBuffer;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.network.NetworkDirection;
 import net.minecraftforge.fml.network.NetworkEvent;
 import xyz.pixelatedw.mineminenomi.api.crew.Crew;
 import xyz.pixelatedw.mineminenomi.api.crew.JollyRoger;
+import xyz.pixelatedw.mineminenomi.api.events.JollyRogerEvent;
 import xyz.pixelatedw.mineminenomi.data.world.ExtendedWorldData;
 import xyz.pixelatedw.mineminenomi.packets.server.SSyncWorldDataPacket;
 import xyz.pixelatedw.mineminenomi.wypi.WyNetwork;
@@ -49,6 +51,10 @@ public class CUpdateJollyRogerPacket
 				ExtendedWorldData worldData = ExtendedWorldData.get(player.level);
 
 				Crew crew = worldData.getCrewWithCaptain(uuid);
+
+				JollyRogerEvent.Update event = new JollyRogerEvent.Update(message.jollyRoger, crew);
+				MinecraftForge.EVENT_BUS.post(event);
+
 				if (crew != null)
 					worldData.updateCrewJollyRoger(crew, message.jollyRoger);
 
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeDeleteOFPWPacket.java b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeDeleteOFPWPacket.java
index 0530269cc..6bae59c51 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeDeleteOFPWPacket.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeDeleteOFPWPacket.java
@@ -47,7 +47,7 @@ public class CRequestCreativeDeleteOFPWPacket {
 				/*
 				 * This packet is send when the item is deleted using the creative-only
 				 * "delete item" slot, this assumed the player is in creative and has creative
-				 * permissions in order to achievee Obviously also assumes the fruit is already
+				 * permissions in order to achieve. Obviously also assumes the fruit is already
 				 * in their inventory otherwise there's no point in deleting it
 				 */
 
@@ -62,8 +62,7 @@ public class CRequestCreativeDeleteOFPWPacket {
 						return;
 					}
 				}
-
-				worldProps.updateOneFruit(message.fruitId, player.getUUID(), OneFruitEntry.Status.LOST, "Deleted using creative inventory");
+				worldProps.lostOneFruit(message.fruitId, player, "Deleted using creative inventory");
 			});
 		}
 	}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeSpawnOFPWPacket.java b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeSpawnOFPWPacket.java
index f06537d3d..da130e9bb 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeSpawnOFPWPacket.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/packets/client/ofpw/CRequestCreativeSpawnOFPWPacket.java
@@ -4,9 +4,12 @@ import java.util.function.Supplier;
 
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.PacketBuffer;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.network.NetworkDirection;
 import net.minecraftforge.fml.network.NetworkEvent;
 import xyz.pixelatedw.mineminenomi.api.OneFruitEntry;
+import xyz.pixelatedw.mineminenomi.api.events.onefruit.InventoryDevilFruitEvent;
+import xyz.pixelatedw.mineminenomi.api.helpers.DevilFruitHelper;
 import xyz.pixelatedw.mineminenomi.data.world.ExtendedWorldData;
 
 public class CRequestCreativeSpawnOFPWPacket {
@@ -55,6 +58,8 @@ public class CRequestCreativeSpawnOFPWPacket {
 				}
 
 				worldProps.updateOneFruit(message.fruitId, player.getUUID(), OneFruitEntry.Status.INVENTORY, "Spawned using creative inventory");
+				InventoryDevilFruitEvent event = new InventoryDevilFruitEvent(player, DevilFruitHelper.getDevilFruitItem(message.fruitId), "Spawned using creative inventory");
+				MinecraftForge.EVENT_BUS.post(event);
 			});
 		}
 	}
diff --git a/src/main/java/xyz/pixelatedw/mineminenomi/setup/ForgeSetup.java b/src/main/java/xyz/pixelatedw/mineminenomi/setup/ForgeSetup.java
index 442528ef3..99e7b1807 100644
--- a/src/main/java/xyz/pixelatedw/mineminenomi/setup/ForgeSetup.java
+++ b/src/main/java/xyz/pixelatedw/mineminenomi/setup/ForgeSetup.java
@@ -1,11 +1,10 @@
 package xyz.pixelatedw.mineminenomi.setup;
 
+import java.time.Instant;
 import java.util.HashMap;
 import java.util.Map;
-
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
-
 import net.minecraft.command.CommandSource;
 import net.minecraft.command.Commands;
 import net.minecraft.world.biome.Biome;
@@ -23,6 +22,7 @@ import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.event.server.FMLServerStartingEvent;
 import xyz.pixelatedw.mineminenomi.ModMain;
+import xyz.pixelatedw.mineminenomi.api.crew.Crew;
 import xyz.pixelatedw.mineminenomi.commands.AbilityCommand;
 import xyz.pixelatedw.mineminenomi.commands.AbilityProtectionCommand;
 import xyz.pixelatedw.mineminenomi.commands.BellyCommand;
@@ -43,6 +43,7 @@ import xyz.pixelatedw.mineminenomi.commands.QuestCommand;
 import xyz.pixelatedw.mineminenomi.commands.RemoveDFCommand;
 import xyz.pixelatedw.mineminenomi.config.SystemConfig;
 import xyz.pixelatedw.mineminenomi.data.IronValuesManager;
+import xyz.pixelatedw.mineminenomi.data.world.ExtendedWorldData;
 import xyz.pixelatedw.mineminenomi.init.ModEntities;
 import xyz.pixelatedw.mineminenomi.init.ModFeatures;
 import xyz.pixelatedw.mineminenomi.init.ModStructures;
@@ -51,23 +52,21 @@ import xyz.pixelatedw.mineminenomi.wypi.WyPatreon;
 import xyz.pixelatedw.mineminenomi.wypi.WyPatreon.BuildMode;
 
 @Mod.EventBusSubscriber(modid = ModMain.PROJECT_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
-public class ForgeSetup
-{
+public class ForgeSetup {
 	@SubscribeEvent
 	public static void addReloadListeners(AddReloadListenerEvent event) {
 		event.addListener(IronValuesManager.INSTANCE);
 	}
-	
+
 	@SubscribeEvent
-	public static void serverStarting(FMLServerStartingEvent event)
-	{
+	public static void serverStarting(FMLServerStartingEvent event) {
 		CommandDispatcher dispatcher = event.getServer().getCommands().getDispatcher();
 
 		LiteralArgumentBuilder<CommandSource> masterBuilder = null;
 		boolean masterCommandFlag = SystemConfig.MASTER_COMMAND.get();
-		if(masterCommandFlag)
+		if (masterCommandFlag)
 			masterBuilder = Commands.literal("mmnm");
-		
+
 		AbilityProtectionCommand.register(dispatcher, masterBuilder);
 		DorikiCommand.register(dispatcher, masterBuilder);
 		BountyCommand.register(dispatcher, masterBuilder);
@@ -85,38 +84,46 @@ public class ForgeSetup
 		DamageMultiplierCommand.register(dispatcher, masterBuilder);
 		LoyaltyCommand.register(dispatcher, masterBuilder);
 		GoRogueCommand.register(dispatcher, masterBuilder);
-		
-		if(WyPatreon.BUILD_MODE != BuildMode.RELEASE)
+
+		if (WyPatreon.BUILD_MODE != BuildMode.RELEASE)
 			FGCommand.register(dispatcher, masterBuilder);
-		
-		if(masterCommandFlag)
-			dispatcher.register(masterBuilder);	
+
+		if (masterCommandFlag)
+			dispatcher.register(masterBuilder);
+
+		// Migrate existing Crews
+		for (Crew crew : ExtendedWorldData.get().getCrews()) {
+			if (crew.getCreationDate() == 0L) {
+				crew.setCreationDate(Instant.now().getEpochSecond());
+				ExtendedWorldData.get().setDirty();
+			}
+		}
 	}
 
 	@SubscribeEvent(priority = EventPriority.HIGH)
-	public static void biomeModification(BiomeLoadingEvent event)
-	{
-		if(event.getCategory() == Biome.Category.NETHER || event.getCategory() == Biome.Category.THEEND)
+	public static void biomeModification(BiomeLoadingEvent event) {
+		if (event.getCategory() == Biome.Category.NETHER
+				|| event.getCategory() == Biome.Category.THEEND)
 			return;
-		
-		// Add our structure to all biomes including other modded biomes, we individually check for the biomes and their specs for each structure if they're OPStructure
-		for(Map.Entry<Structure<?>, StructureFeature<?, ?>> entry : ModStructures.REGISTERED_STRUCTURES.entrySet())
-		{
-			if(entry.getKey() instanceof OPStructure && !((OPStructure)entry.getKey()).biomeCheck(event))
+
+		// Add our structure to all biomes including other modded biomes, we individually check for
+		// the biomes and their specs for each structure if they're OPStructure
+		for (Map.Entry<Structure<?>, StructureFeature<?, ?>> entry : ModStructures.REGISTERED_STRUCTURES
+				.entrySet()) {
+			if (entry.getKey() instanceof OPStructure
+					&& !((OPStructure) entry.getKey()).biomeCheck(event))
 				continue;
 			event.getGeneration().getStructures().add(() -> entry.getValue());
 		}
-		
+
 		ModFeatures.setupFeatures(event);
-		
+
 		ModEntities.setupCategorySpawns(event);
 	}
-	
+
 	@SubscribeEvent
-	public static void addDimensionalSpacing(WorldEvent.Load event)
-	{
-		if (event.getWorld() instanceof ServerWorld)
-		{
+	public static void addDimensionalSpacing(WorldEvent.Load event) {
+		if (event.getWorld() instanceof ServerWorld) {
 			ServerWorld serverWorld = (ServerWorld) event.getWorld();
 
 			// Prevent spawning our structure in Vanilla's superflat world as
@@ -125,19 +132,20 @@ public class ForgeSetup
 			if (serverWorld.getChunkSource().getGenerator() instanceof FlatChunkGenerator)
 				return;
 
-			Map<Structure<?>, StructureSeparationSettings> tempMap = new HashMap<>(serverWorld.getChunkSource().getGenerator().getSettings().structureConfig);
-			for(Map.Entry<Structure<?>, StructureFeature<?, ?>> entry : ModStructures.REGISTERED_STRUCTURES.entrySet())
-				tempMap.put(entry.getKey(), DimensionStructuresSettings.DEFAULTS.get(entry.getKey()));
+			Map<Structure<?>, StructureSeparationSettings> tempMap = new HashMap<>(
+					serverWorld.getChunkSource().getGenerator().getSettings().structureConfig);
+			for (Map.Entry<Structure<?>, StructureFeature<?, ?>> entry : ModStructures.REGISTERED_STRUCTURES
+					.entrySet())
+				tempMap.put(entry.getKey(),
+						DimensionStructuresSettings.DEFAULTS.get(entry.getKey()));
 			serverWorld.getChunkSource().getGenerator().getSettings().structureConfig = tempMap;
 		}
 	}
-	
+
 	/*
-	@SubscribeEvent
-	public static void onRegisterDimensionsEvent(RegisterDimensionsEvent event)
-	{
-		if (DimensionType.byName(ModResources.DIMENSION_TYPE_CHALLENGES) == null)
-			DimensionManager.registerDimension(ModResources.DIMENSION_TYPE_CHALLENGES, ModDimensions.CHALLENGES, null, true);
-	}
-	*/
-}
\ No newline at end of file
+	 * @SubscribeEvent public static void onRegisterDimensionsEvent(RegisterDimensionsEvent event) {
+	 * if (DimensionType.byName(ModResources.DIMENSION_TYPE_CHALLENGES) == null)
+	 * DimensionManager.registerDimension(ModResources.DIMENSION_TYPE_CHALLENGES,
+	 * ModDimensions.CHALLENGES, null, true); }
+	 */
+}
